package main

import (
	"context"
	"fmt"
	"net/http"
	"time"

	cowclickerv1 "cowclicker-grpc-api/gen/go/cowclicker/v1"                  // generated by protoc-gen-go
	cowclickerv1connect "cowclicker-grpc-api/gen/go/cowclicker/v1/v1connect" // generated by protoc-gen-connect-go
)

type CowclickerServer struct{}

func (s *CowclickerServer) Click(
	ctx context.Context,
	req *cowclickerv1.ClickRequest,
) (*cowclickerv1.ClickResponse, error) {
	res := &cowclickerv1.ClickResponse{
		ServerReceivedEpochMs: time.Now().UnixMilli(),
		ClickCount:            1,
	}

	// do some work

	res.ServerSentEpochMs = time.Now().UnixMilli()
	return res, nil
}

const connectPrefix = "/connect"
const addr = ":5174"

func main() {
	cowClickServer := &CowclickerServer{}
	cowClickMux := http.NewServeMux()
	cowClickMux.Handle(cowclickerv1connect.NewClickServiceHandler(cowClickServer))

	// expose under /connect
	mux := http.NewServeMux()
	mux.Handle(connectPrefix, http.StripPrefix(connectPrefix, cowClickMux))

	p := new(http.Protocols)
	p.SetHTTP1(true)
	// Use h2c so we can serve HTTP/2 without TLS.
	p.SetUnencryptedHTTP2(true)
	s := http.Server{
		Addr:      addr,
		Handler:   mux,
		Protocols: p,
	}
	fmt.Println("Server is running on", addr, "under", connectPrefix)
	s.ListenAndServe()
}
