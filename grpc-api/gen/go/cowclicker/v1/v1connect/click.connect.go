// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cowclicker/v1/click.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cowclicker-grpc-api/gen/go/cowclicker/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClickServiceName is the fully-qualified name of the ClickService service.
	ClickServiceName = "cowclicker.v1.ClickService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClickServiceClickProcedure is the fully-qualified name of the ClickService's Click RPC.
	ClickServiceClickProcedure = "/cowclicker.v1.ClickService/Click"
)

// ClickServiceClient is a client for the cowclicker.v1.ClickService service.
type ClickServiceClient interface {
	Click(context.Context, *v1.ClickRequest) (*v1.ClickResponse, error)
}

// NewClickServiceClient constructs a client for the cowclicker.v1.ClickService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClickServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClickServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clickServiceMethods := v1.File_cowclicker_v1_click_proto.Services().ByName("ClickService").Methods()
	return &clickServiceClient{
		click: connect.NewClient[v1.ClickRequest, v1.ClickResponse](
			httpClient,
			baseURL+ClickServiceClickProcedure,
			connect.WithSchema(clickServiceMethods.ByName("Click")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clickServiceClient implements ClickServiceClient.
type clickServiceClient struct {
	click *connect.Client[v1.ClickRequest, v1.ClickResponse]
}

// Click calls cowclicker.v1.ClickService.Click.
func (c *clickServiceClient) Click(ctx context.Context, req *v1.ClickRequest) (*v1.ClickResponse, error) {
	response, err := c.click.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ClickServiceHandler is an implementation of the cowclicker.v1.ClickService service.
type ClickServiceHandler interface {
	Click(context.Context, *v1.ClickRequest) (*v1.ClickResponse, error)
}

// NewClickServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClickServiceHandler(svc ClickServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clickServiceMethods := v1.File_cowclicker_v1_click_proto.Services().ByName("ClickService").Methods()
	clickServiceClickHandler := connect.NewUnaryHandlerSimple(
		ClickServiceClickProcedure,
		svc.Click,
		connect.WithSchema(clickServiceMethods.ByName("Click")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cowclicker.v1.ClickService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClickServiceClickProcedure:
			clickServiceClickHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClickServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClickServiceHandler struct{}

func (UnimplementedClickServiceHandler) Click(context.Context, *v1.ClickRequest) (*v1.ClickResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cowclicker.v1.ClickService.Click is not implemented"))
}
